Creator-Set Rewards (Flexible MVP)

Reward Details Input

Title / Name of the reward

Description / Text (can include conditions, like “1-month mobile recharge”)

Image Upload for the reward (good quality, visually appealing)

Optional external link (Amazon, e-commerce, or digital gift link)

Reward Types

Cash (via QR / UPI)

Digital rewards (recharge, subscriptions, codes)

Physical products (creator ships externally)

Creator Responsibility

Creator confirms responsibility before publishing the game

App only facilitates display and messaging—does not guarantee delivery

UI / Display

Reward info displayed to users after the reel/game

Makes the game more attractive and engaging

MVP Benefits

Creators can showcase their reward creatively

Users get clear idea of what they can win

Simple backend—store text, image, optional link








Perfect! Here’s a **full MVP flow diagram** for your gaming feature in your app “Cientme,” with the **game appearing after reels**:

---

### **Cientme MVP Gaming Flow Diagram**

**1. Reel Display**

* User scrolls reels (TikTok-style feed).
* Reel ends → triggers **game prompt** if the reel has a linked game.

---

**2. Game Creation (by Creator or Company)**

* Creator selects:

  * Number of winners (e.g., top 5)
  * Reward type: **cash (QR/UPI), digital (recharge, subscription), or product**
  * Uploads reward **image + description + optional link**
* Creator confirms **responsibility for reward delivery**.
* Company can also create games **visible to all users**.

---

**3. Game Play / Participation**

* Users participate immediately after reel ends.
* User guesses number(s) or completes game task.
* System randomly selects winners based on participation.

---

**4. Winner Selection**

* Winner(s) are **announced immediately** after game ends.
* App displays:

  * Reward info (image/text/link)
  * Messaging button to contact creator

---

**5. Messaging & Reward Claim**

* **One-to-One Messaging:**

  * Only winners can message creator.
  * Winner sends QR code (for cash/digital rewards) or claim info (for product).
* Creator sends reward **externally**.
* Optional proof screenshot can be submitted by winner (logs only).

---

**6. Complaint / Escalation (Optional MVP Step)**

* If reward is not received, winner can **file complaint to company**.
* Company reviews proof and logs dispute.
* App does **not guarantee delivery** at this stage.

---

**7. Creator Accountability**

* Repeated complaints → **temporary block from creating games**.
* Clear app rules:

  > “Creators are responsible for delivering rewards. App is not liable for failures.”

---

**8. Post-MVP / Future Upgrades (Optional)**

* Escrow payments: creator → company → winner
* Non-cash digital rewards fully verified
* Ratings or trust scores for creators
* Separate gaming feed for games independent of reels

---

✅ **MVP Highlights:**

* Game **always appears after reel** → increases reel watch time and engagement.
* Flexible rewards: cash, digital, or product.
* Simple messaging system: winners contact creators.
* App **doesn’t handle money** yet—keeps MVP safe and simple.

---

If you want, I can **draw this as a visual diagram with boxes and arrows**, so it’s easier to show your developers or design team.

Do you want me to do that?















Here’s a structured list of **features we’ve discussed or can still add** for your number-guessing game, based on all previous conversations:

---

### **Core Features (Already Implemented / Planned)**

1. **Game Creation**

   * Creator or company can create a game.
   * Set **number of winners**, **guess range** (`guess_min`, `guess_max`), **reward type**, and **reel link**.
   * **Duration** of the game can be set (e.g., 24 hours, 1 week, etc.).
   * `end_time` is calculated automatically based on duration.

2. **User Participation**

   * Users can **submit only one guess per game**.
   * Guess must be within the specified range.
   * Game **cannot be updated or deleted after participation**.
   * Submissions are timestamped to determine winners.

3. **Winning Logic**

   * Creator sets **number of winning numbers**, but cannot choose exact numbers (randomly generated for transparency).
   * Winners are determined based on earliest correct submissions.
   * Each winning number is claimed only once.
   * Winning info stored in `WinningNumber` model.

4. **Admin Management**

   * Inline view of submissions in Game admin.
   * GameSubmission, WinningNumber, and Game admin interfaces with read-only fields where needed.
   * Auto-assign creator on creation.

5. **Game History & Winner History**

   * `GameHistory` stores immutable info of completed games.
   * `WinnerHistory` stores immutable info of winners.
   * Users can see their own winning history.
   * Creator/company can see all winners for their games.
   * History cannot be deleted or altered.

---

### **Additional Features We Can Add**

1. **Timer & Remaining Time Display**

   * Show **remaining time** for active games to all users.
   * Read-only fields: `duration`, `end_time`, `remaining_time`.

2. **Notifications / Alerts**

   * Notify users when:

     * Game starts.
     * Game ends.
     * They win or lose.

3. **Leaderboard / Gamification**

   * Track user stats: total wins, participation count.
   * Creator/company stats: number of games created, number of winners, total rewards distributed.
   * Points / rewards for sharing games (optional for MVP).

4. **Reward Claiming**

   * Users can **claim prizes** after game ends.
   * Mark claimed prizes in `WinningNumber` and `WinnerHistory`.

5. **Filtering & Sorting in API**

   * Filter games by active status, creator, reward type.
   * Sort by ending soonest, most popular, or recently created.

6. **Transparency Features**

   * Display number of submissions per game.
   * Show total winners and their prizes once game ends.

7. **Optional Enhancements**

   * Game can be **featured** or pinned for more visibility.
   * Analytics for creators: participation rate, guessed numbers distribution, etc.

---

✅ **Summary:**
For MVP, we have the **core features fully implemented**: creation, submission, winner logic, history, admin interface.
Next, we can add **timer display, notification, reward claiming, and gamification features** to make it more engaging.

---

If you want, I can **draft the next version of models, serializers, and views** including:

* `duration`, `end_time`, `remaining_time`
* Winner declaration after time ends
* Read-only history
* Reward claiming logic

Do you want me to do that next?
